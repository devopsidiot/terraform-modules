output "cluster_endpoint" {
  description = "Endpoint for EKS control plane."
  value       = module.eks.cluster_endpoint
}
output "cluster_security_group_id" {
  description = "Security group ids attached to the cluster control plane."
  value       = module.eks.cluster_security_group_id
}

output "kubectl_config" {
  description = "kubectl config as generated by the module."
  value       = module.eks.kubeconfig
  sensitive   = true
}

output "config_map_aws_auth" {
  description = "A kubernetes configuration to authenticate to this EKS cluster."
  value       = module.eks.config_map_aws_auth
  sensitive   = true
}
output "cluster_certificate_authority_data" {
  value     = module.eks.cluster_certificate_authority_data
  sensitive = true
}

output "cluster_id" {
  value       = module.eks.cluster_id
  description = "the ID of the EKS cluster created."
}
output "cluster_admin_role" {
  value       = var.kubeconfig_role
  description = "the role that needs to be assumed to acquire an EKS authentication token for use with iam-authenticator."
}

output "oidc_provider_arn" {
  value       = module.eks.oidc_provider_arn
  description = "ARN of the oidc provider created for EKS."
}

output "cluster_oidc_issuer_url" {
  value       = module.eks.cluster_oidc_issuer_url
  description = "Issuer URL of the oidc provider created for EKS."
}

# output "data_http_karpenter_crd_provisioners" {
#   description = "The http data source makes an HTTP GET request karpenter provisioners CRD."
#   value       = data.http.karpenter_crd_provisioners.response_body
# }

# output "kubectl_manifest_karpenter_crd_provisioners" {
#   description = "Create a Kubernetes resource using karpenter provisioners CRD manifests."
#   value       = try({ for k, v in kubectl_manifest.karpenter_crd_provisioners : k => (k != "live_manifest_incluster" && k != "yaml_body" && k != "yaml_incluster" ? v : null) }, null)
# }

# output "data_http_karpenter_crd_awsnodetemplates" {
#   description = "The http data source makes an HTTP GET request karpenter awsnodetemplates CRD."
#   value       = data.http.karpenter_crd_awsnodetemplates.response_body
# }

# output "kubectl_manifest_karpenter_crd_awsnodetemplates" {
#   description = "Create a Kubernetes resource using karpenter awsnodetemplates CRD manifests."
#   value       = try({ for k, v in kubectl_manifest.karpenter_crd_awsnodetemplates : k => (k != "live_manifest_incluster" && k != "yaml_body" && k != "yaml_incluster" ? v : null) }, null)
# }

# output "aws_iam_policy_karpenter" {
#   description = "Provides an IAM policy for karpenter."
#   value       = aws_iam_policy.karpenter
# }
